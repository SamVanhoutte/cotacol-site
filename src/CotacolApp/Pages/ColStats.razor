@page "/colstats"
@using MatBlazor
@using CotacolApp.Models.CotacolApi
@inject ICotacolClient CotacolClient
@inject IUserProfileManager UserProfile
@using Microsoft.AspNetCore.Components.Web.Extensions.Head
<Title Value="Cotacol statistics" />

<h1>Crunching numbers</h1>

@if (!UserProfile.IsAuthenticated)
{
    <p>
        <em>Since you are not a registered user, user names and activity details are hidden for user privacy.</em>
    </p>
}

@if (stats == null)
{
    <p>
        <em>Loading climbs...</em>
    </p>
}
else
{
    <h2>Climb popularity</h2>
    <MatTable FilterByColumnName="CotacolName" Items="@stats.Cotacols" class="lektonic" PageSize="100"
              ShowPaging="false" UseSortHeaderRow="true">
        <MatTableHeader>
            <MatSortHeaderRow SortChanged="SortClimbs">
                <MatSortHeader SortId="name"><div style="min-width: 250px">Name</div></MatSortHeader>
                <MatSortHeader SortId="userCount">Users</MatSortHeader>
                <MatSortHeader SortId="userCount">Legends</MatSortHeader>
                <MatSortHeader SortId="attemptCount"><div style="min-width: 120px">Total attempts</div></MatSortHeader>
                <MatSortHeader SortId="empty">&nbsp;</MatSortHeader>
            </MatSortHeaderRow>
        </MatTableHeader>
        <MatTableRow Context="climb">
            <td>
                <b><a href="cotacol/@climb.CotacolId">@climb.CotacolName</a></b>
            </td>
            <td style="text-align: right">@climb.UniqueUsers</td>
            <td style="text-align: center">@if (ColHasLocalLegends(climb.CotacolId))
                                {
                                    <span 
                                        data-text="@PrintLocalLegends(climb.CotacolId)" 
                                        class="cctooltip"
                                    ><img src="images/legend-icon-pink.png" /></span>
                                }
                else
                {
                    <span>&nbsp;</span>
                }
                </td>
            <td style="text-align: right">@climb.TotalAttempts</td>
            <td>&nbsp;</td>
        </MatTableRow>
    </MatTable>
}

@code {
    private SiteStats stats = null;
    public int tabIndex = 0;

    protected override async Task OnInitializedAsync()
    {
        stats = await CotacolClient.GetStatsAsync();
    }
    
    private void SortClimbs(MatSortChangedEvent sort)
    {
        if (!(sort == null || sort.Direction == MatSortDirection.None || string.IsNullOrEmpty(sort.SortId)) && stats != null)
        {
            switch (sort.SortId)
            {
                case "userCount":
                    stats.Cotacols = sort.Direction == MatSortDirection.Asc ?
                        stats.Cotacols.OrderBy(c => c.UniqueUsers).ToList() :
                        stats.Cotacols.OrderByDescending(c => c.UniqueUsers).ToList();
                    break;
                case "attemptCount":
                    stats.Cotacols = sort.Direction == MatSortDirection.Asc ?
                        stats.Cotacols.OrderBy(c => c.TotalAttempts).ToList() :
                        stats.Cotacols.OrderByDescending(c => c.TotalAttempts).ToList();
                    break;
            }
        }
    }

    private bool ColHasLocalLegends(string colId)
    {
        var legendcol = stats.Cotacols.FirstOrDefault(col => col.CotacolId.Equals(colId));
        return legendcol?.LocalLegends?.Any() ?? false;
    }

    private string PrintLocalLegends(string colId)
    {
        var legendcol = stats.Cotacols.FirstOrDefault(col => col.CotacolId.Equals(colId));
        if (legendcol?.LocalLegends?.Any() ?? false)
        {
            if (!UserProfile.IsAuthenticated)
            {
                return $"{legendcol.LocalLegends.Count} legend{(legendcol.LocalLegends.Count>1?"s":"")} ({legendcol.LocalLegends.First().Attempts} attempts)";
            }
            else
            {
                return $"{string.Join(", ", legendcol.LocalLegends.Select(leg => leg.UserName))} ({legendcol.LocalLegends.First().Attempts} attempts)";
            }
        }
        return "";
    }

}