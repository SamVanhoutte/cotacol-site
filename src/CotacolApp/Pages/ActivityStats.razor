@page "/activitystats"
@using MatBlazor
@using CotacolApp.Models.CotacolApi
@using CotacolApp.Services.Extensions
@inject ICotacolClient CotacolClient
@inject IUserProfileManager UserProfile
@using Microsoft.AspNetCore.Components.Web.Extensions.Head
<Title Value="Cotacol activity stats" />

<h1>Crunching numbers</h1>

@if (!UserProfile.IsAuthenticated)
{
    <p class="lektonic">
        <em>Since you are not a registered user, user names and activity details are hidden for user privacy.</em>
    </p>
}

@if (stats == null)
{
    <p>
        <em>Loading climbs...</em>
    </p>
}
else
{
    <h2>Toughest activities</h2>
    <MatTable Items="@stats.Activities" class="lektonic" PageSize="100"
              ShowPaging="false" UseSortHeaderRow="true">
        <MatTableHeader>
            <MatSortHeaderRow SortChanged="SortActivities">
                <MatSortHeader SortId="name">Hunter</MatSortHeader>
                <MatSortHeader SortId="date">Date</MatSortHeader>
                <MatSortHeader SortId="cols">Cols</MatSortHeader>
                <MatSortHeader SortId="points">Points</MatSortHeader>
                <MatSortHeader SortId="empty"></MatSortHeader>
            </MatSortHeaderRow>
        </MatTableHeader>
        <MatTableRow>
            <td style="min-width: 240px">
                @if (UserProfile.IsAuthenticated)
                {
                    <a href="achievements/@context.UserId">@PrintName(context)</a>
                }
                else
                {
                    @PrintName(context)
                }
            </td>
            <td style="min-width: 240px">
                @if (UserProfile.IsAuthenticated)
                {
                    <a href="@context.ActivityUrl" target="_blank">@context.ActivityDate.ToString("D")</a>
                }
                else
                {
                    @context.ActivityDate.ToString("D")
                }
            </td>
            <td style="text-align: right">@context.UniqueCols</td>
            <td style="text-align: right">@context.TotalPoints.Number()</td>
            <td>&nbsp;</td>
        </MatTableRow>
    </MatTable>
}

@code {
    private SiteStats stats = null;
    public int tabIndex = 0;

    protected override async Task OnInitializedAsync()
    {
        stats = await CotacolClient.GetStatsAsync();
    }

    private string GetName(string fullName, string userName)
    {
        if (UserProfile.IsAuthenticated)
        {
            if (!string.IsNullOrEmpty(fullName))
                return fullName;
            if (!string.IsNullOrEmpty(userName))
                return userName;
            return "Anonymous";
        }
        if (!string.IsNullOrEmpty(fullName))
        {
            var result = "";
            foreach (var namePart in fullName.Split(' '))
            {
                if (!string.IsNullOrEmpty(namePart))
                {
                    var newChar = namePart[0];
                    if (newChar < 128)
                        result += newChar;
                }
            }
            return result;
        }
        return "Anonymous";
    }

    private string PrintName(Activity activity)
    {
        return GetName(activity.FullName, activity.UserName);
    }

   private void SortActivities(MatSortChangedEvent sort)
    {
        if (!(sort == null || sort.Direction == MatSortDirection.None || string.IsNullOrEmpty(sort.SortId)) && stats != null)
        {
            switch (sort.SortId)
            {
                case "date":
                    stats.Activities = sort.Direction == MatSortDirection.Asc ?
                        stats.Activities.OrderBy(c => c.ActivityDate).ToList() :
                        stats.Activities.OrderByDescending(c => c.ActivityDate).ToList();
                    break;
                case "cols":
                    stats.Activities = sort.Direction == MatSortDirection.Asc ?
                        stats.Activities.OrderBy(c => c.UniqueCols).ToList() :
                        stats.Activities.OrderByDescending(c => c.UniqueCols).ToList();
                    break;
                case "points":
                    stats.Activities = sort.Direction == MatSortDirection.Asc ?
                        stats.Activities.OrderBy(c => c.TotalPoints).ToList() :
                        stats.Activities.OrderByDescending(c => c.TotalPoints).ToList();
                    break;
            }
        }
    }

}