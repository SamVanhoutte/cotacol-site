@page "/admin/user/{UserId}"
@using CotacolApp.Models.CotacolApi
@using CotacolApp.Services.Extensions
@using MatBlazor
@using Newtonsoft.Json
@inject ICotacolClient CotacolClient
@inject ICotacolUserClient CotacolUserClient
@inject IUserProfileManager UserProfile

@if (userProfile != null)
{
    <h1>@userProfile.FullName</h1>
}
else
{
    <h1>User details</h1>
}


@if (UserProfile.IsAdmin)
{
    @if (userDetail != null)
    {
        <div class="mat-layout-grid">
            <div class="mat-layout-grid-inner">
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3">
                    <h3>Trigger full sync</h3>
                    <MatSlideToggle @bind-Value="@fullSync"></MatSlideToggle>&nbsp;<span>Full sync</span>
                    <MatIconButton Icon="refresh" OnClick="@(async () => await PerformUserSyncAsync())"></MatIconButton>
                    @if(fullSyncResponse!=null)
                    {
                        <MatButtonLink Icon="favorite" Target="_blank" Href="@fullSyncResponse.StatusQueryGetUri">Check technical details</MatButtonLink>
                    }
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3">
                    <h3>Trigger activity sync</h3>
                    <MatTextField @bind-Value="@activityId" TValue="string" Label="Activity ID"></MatTextField>
                    <MatIconButton Icon="refresh" OnClick="@(async () => await PerformActivitySyncAsync())"></MatIconButton>
                    @if(activitySyncResponse!=null)
                    {
                        <MatButtonLink Icon="favorite" Target="_blank" Href="@activitySyncResponse.StatusQueryGetUri">Check technical details</MatButtonLink>
                    }
                </div>
            </div>
            <div class="mat-layout-grid-inner">
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
                    <h2>Sync status</h2>
                    <MatList SingleSelection="true" TwoLine="true">
                        <MatListItem>
                            <MatListItemText>
                                <MatListItemPrimaryText>Synchronization Status</MatListItemPrimaryText>
                                <MatListItemSecondaryText>@(syncStatus.Status)</MatListItemSecondaryText>
                            </MatListItemText>
                        </MatListItem>
                        <MatListItem>
                            <MatListItemText>
                                <MatListItemPrimaryText>Active sync</MatListItemPrimaryText>
                                <MatListItemSecondaryText>@syncStatus.SyncActive</MatListItemSecondaryText>
                            </MatListItemText>
                        </MatListItem>
                        <MatListItem>
                            <MatListItemText>
                                <MatListItemPrimaryText>Activity count</MatListItemPrimaryText>
                                <MatListItemSecondaryText>@syncStatus.Processed.Number() / @syncStatus.Total.Number()</MatListItemSecondaryText>
                            </MatListItemText>
                        </MatListItem>
                    </MatList>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
                    <h2>Strava token</h2>
                    <MatList SingleSelection="true" TwoLine="true">
                        <MatListItem>
                            <MatListItemText>
                                <MatListItemPrimaryText>User Id</MatListItemPrimaryText>
                                <MatListItemSecondaryText>
                                    <a href="https://www.strava.com/athletes/@userDetail.UserTokens.UserId" target="_blank">@userDetail.UserTokens.UserId</a>
                                </MatListItemSecondaryText>
                            </MatListItemText>
                        </MatListItem>
                        <MatListItem>
                            <MatListItemText>
                                <MatListItemPrimaryText>Is Expired</MatListItemPrimaryText>
                                <MatListItemSecondaryText>@userDetail.UserTokens.IsExpired.ToString()</MatListItemSecondaryText>
                            </MatListItemText>
                        </MatListItem>
                        <MatListItem>
                            <MatListItemText>
                                <MatListItemPrimaryText>Token Expiration</MatListItemPrimaryText>
                                <MatListItemSecondaryText>@userDetail.UserTokens.Expiration</MatListItemSecondaryText>
                            </MatListItemText>
                        </MatListItem>
                        <MatListItem>
                            <MatListItemText>
                                <MatListItemPrimaryText>Last refresh</MatListItemPrimaryText>
                                <MatListItemSecondaryText>@userDetail.UserTokens.LastRefreshTime</MatListItemSecondaryText>
                            </MatListItemText>
                        </MatListItem>
                        <MatListItem>
                            <MatListItemText>
                                <MatListItemPrimaryText>Scope</MatListItemPrimaryText>
                                <MatListItemSecondaryText>@(userDetail.UserTokens.Scope ?? "not set")</MatListItemSecondaryText>
                            </MatListItemText>
                        </MatListItem>
                    </MatList>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-8">
                    <h2>User state</h2>
                    <textarea name="jsonstate" cols="80" rows="100">@userStateJson</textarea>
                </div>
            </div>
        </div>
    }
}
else
{
    <p>
        <em>Only accessible for admin users. Please contact someone of the crew if you believe you should be an admin.</em>
    </p>
}

@code {

    [Parameter]
    public string UserId { get; set; }

    private bool fullSync;
    private string activityId;
    private UserStateDetail userDetail;
    private string userStateJson;
    private SyncStatus syncStatus;
    private UserProfile userProfile;
    private AsyncWorkflowResult fullSyncResponse;
    private AsyncWorkflowResult activitySyncResponse;
    
    protected override async Task OnInitializedAsync()
    {
        if (UserProfile.IsAdmin && !string.IsNullOrEmpty(UserId))
        {
            userDetail = await CotacolClient.GetUserAdminInfoAsync(UserId);
            if (userDetail.State != null)
            {
                userStateJson = userDetail.State.ToString(Formatting.Indented);
            }
            syncStatus = await CotacolUserClient.GetSyncStatus(UserId);
            userProfile = await CotacolUserClient.GetProfileAsync(UserId);
        }
    }

    private string getFullSyncLabel(bool fullSync)
    {
        return fullSync ? "Full sync" : "Normal sync";
    }
    private async Task PerformActivitySyncAsync()
    {
        activitySyncResponse = await CotacolUserClient.SynchronizeActivityAsync(UserId, activityId);
    }
    
    private async Task PerformUserSyncAsync()
    {
        fullSyncResponse = await CotacolUserClient.SynchronizeAsync(UserId, fullSync);
    }
}