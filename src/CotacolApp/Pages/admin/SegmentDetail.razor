@page "/admin/segments/{CotacolId}"
@using MatBlazor
@using CotacolApp.Models.CotacolApi
@using Microsoft.ApplicationInsights
@inject ICotacolClient CotacolClient
@inject IUserProfileManager UserProfile
@attribute [Authorize]
<h1>Segment integration</h1>
<h2>Admin page</h2>

<br/>
@if (UserProfile.IsAdmin)
{
    <MatAccordion Multi="true">
        <MatExpansionPanel>
            <MatExpansionPanelSummary Class="lektonic">
                <MatExpansionPanelHeader>User guidance for segment editing</MatExpansionPanelHeader>
            </MatExpansionPanelSummary>
            <MatExpansionPanelDetails>
                <ul>
                    <li>When setting a new segment, the old segment will be made invalid after one week.</li>
                    <li>Old segments will still be valid and matched for activities that happened, while the segment was active</li>
                    <li>Create or search the right segment on strava and keep the SegmentId (part of the url)</li>
                    <li>Enter the SegmentId in the 'New Segment' text box and press enter</li>
                    <li>Shortly after that, the new segment will be shown on the map, and in the table</li>
                    <li>At this point, nothing has been changed yet, as we need you to validate the segment</li>
                    <li>If the segment looks right, press the 'Check' icon and enter the details in the popup window</li>
                </ul>
                <ul>
                    <li>It's also possible to update the actual segment of the map</li>
                    <li>Just upload or drop a GPX with the right route and you will see the update reflected</li>
                    <li>Don't forget to press the icon to confirm and update the actual data on the backend</li>
                </ul>
            </MatExpansionPanelDetails>
        </MatExpansionPanel>
    </MatAccordion>
    <br/>
    <hr/>
    @if (climbDetail == null)
    {
        <p>
            <em>Loading the details from Strava &nbsp;Cotacol API...</em>
        </p>
    }
    else
    {
        <h3>#@CotacolId: @climbDetail.Name</h3>
        <ul>
            <li>
                <b>Points:</b> @climbDetail.Cotacolpoints
            </li>
            <li>
                <b>Province:</b> @climbDetail.Province
            </li>
            <li>
                <b>Surface:</b> @climbDetail.Surface
            </li>
        </ul>
        <h3>Segments</h3>

        <SegmentMapComponent Cotacol="climbDetail"/>
    }
}
else
{
    <p>
        <em>Only accessible for admin users. Please contact someone of the crew if you believe you should be an admin.</em>
    </p>
}

@code {

    [Parameter]
    public string CotacolId { get; set; }

    private ClimbDetail climbDetail;

    protected override async Task OnInitializedAsync()
    {
        if (UserProfile.IsAdmin)
        {
            climbDetail = await CotacolClient.GetClimbDetailAsync(CotacolId);
        }
    }


}