@page "/admin/users"
@using CotacolApp.Models.CotacolApi
@using CotacolApp.Services.Extensions
@using MatBlazor
@using Newtonsoft.Json
@inject ICotacolClient CotacolClient
@inject IUserProfileManager UserProfile
@inject NavigationManager NavManager

<h1>User overview</h1>
@if (UserProfile.IsAdmin)
{
    <MatButton Icon="@MatIconNames.Search" OnClick="async () => await LoadUserListAsync()" Label="Load all users"></MatButton>
    @if (userList != null)
    {
        <div class="lektonic">@userList.Count users // @ExpiredUsers expired users // @TestUsers test users </div>
    }
    else
    {
        <hr/>
        <MatTextField TValue="string" ValueChanged="@((val) => NavigateUser(val))" HelperText="Enter the user Id" Label="Go to user" HelperTextPersistent="true"></MatTextField>
    }
    @if (queryLaunched && userList == null)
    {
        <span>Getting data</span>
    }
    <hr/>
    @if (userList != null)
    {
        <MatTable Items="@userList" class="lektonic" PageSize="100"
                  AllowSelection="true" FilterByColumnName="FullName"
                  ShowPaging="true" UseSortHeaderRow="true">
            <MatTableHeader>
                <MatSortHeaderRow SortChanged="SortUsers">
                    <MatSortHeader SortId="id">#</MatSortHeader>
                    <MatSortHeader SortId="name">
                        <span style="width:250px">Name</span>
                    </MatSortHeader>
                    <MatSortHeader SortId="expired">Expired</MatSortHeader>
                    <MatSortHeader SortId="valid">
                        <span style="width:120px">Valid until</span>
                    </MatSortHeader>
                    <MatSortHeader SortId="syncstatus">Sync Status</MatSortHeader>
                    <MatSortHeader SortId="description">Update description</MatSortHeader>
                    <MatSortHeader SortId="private">Private profile</MatSortHeader>
                    <MatSortHeader SortId="activities">Total activities</MatSortHeader>
                    <MatSortHeader SortId="email">Email</MatSortHeader>
                </MatSortHeaderRow>
            </MatTableHeader>
            <MatTableRow>
                <td>
                    <a href="admin/users/@context.Profile.UserId">@context.Profile.UserId</a>
                </td>
                <td style="max-width: 200px">@context.Profile.FullName</td>
                <td>@(context.Health.TokenExpired)</td>
                <td>@context.Health.LastSynced.DateTime()</td>
                <td>@context.Health.SyncStatus</td>
                <td>@context.Profile.Settings.UpdateActivityDescription</td>
                <td>@context.Profile.Settings.PrivateProfile</td>
                <td>@context.Health.TotalActivities.Number()</td>
                <td>@context.Profile.EmailAddress</td>
            </MatTableRow>
        </MatTable>
    }
}
else
{
    <p>
        <em>Only accessible for admin users. Please contact someone of the crew if you believe you should be an admin.</em>
    </p>
}

@code {
    List<UserListRecord> userList;
    private bool loadTokens = false;
    private bool loadSync = false;
    private bool queryLaunched = false;

    protected override async Task OnInitializedAsync()
    {
    }

    private async Task LoadUserListAsync()
    {
        if (UserProfile.IsAdmin)
        {
            queryLaunched = true;
            userList = null;
            userList = await CotacolClient.GetUserListAsync();
        }
    }

    private void NavigateUser(string userId)
    {
        NavManager.NavigateTo($"admin/users/{userId}");
    }

    private int TestUsers => userList.Count(u => u.Profile?.TestUser ?? false);
    private int ExpiredUsers => userList.Count(u => u.Health?.TokenExpired ?? false);

    private void SortUsers(MatSortChangedEvent sort)
    {
        if (!(sort == null || sort.Direction == MatSortDirection.None || string.IsNullOrEmpty(sort.SortId)) && userList != null)
        {
            switch (sort.SortId)
            {
                case "id":
                    userList = sort.Direction == MatSortDirection.Asc ?
                        userList.OrderBy(c => c.Profile.UserId).ToList() :
                        userList.OrderByDescending(c => c.Profile.UserId).ToList();
                    break;
                case "name":
                    userList = sort.Direction == MatSortDirection.Asc ?
                        userList.OrderBy(c => c.Profile.FullName).ToList() :
                        userList.OrderByDescending(c => c.Profile.FullName).ToList();
                    break;
                case "expired":
                    userList = sort.Direction == MatSortDirection.Asc ?
                        userList.OrderBy(c => c.Health.TokenExpired).ToList() :
                        userList.OrderByDescending(c => c.Health.TokenExpired).ToList();
                    break;
                case "valid":
                    userList = sort.Direction == MatSortDirection.Asc ?
                        userList.OrderBy(c => c.Health.LastSynced).ToList() :
                        userList.OrderByDescending(c => c.Health.LastSynced).ToList();
                    break;
                case "description":
                    userList = sort.Direction == MatSortDirection.Asc ?
                        userList.OrderBy(c => c.Profile.Settings.UpdateActivityDescription).ToList() :
                        userList.OrderByDescending(c => c.Profile.Settings.UpdateActivityDescription).ToList();
                    break;
                case "private":
                    userList = sort.Direction == MatSortDirection.Asc ?
                        userList.OrderBy(c => c.Health.PrivateProfile).ToList() :
                        userList.OrderByDescending(c => c.Health.PrivateProfile).ToList();

                    break;
                case "syncstatus":
                    userList = sort.Direction == MatSortDirection.Asc ?
                        userList.OrderBy(c => c.Health.SyncStatus).ToList() :
                        userList.OrderByDescending(c => c.Health.SyncStatus).ToList();
                    break;
                case "activities":
                    userList = sort.Direction == MatSortDirection.Asc ?
                        userList.OrderBy(c => c.Health.TotalActivities).ToList() :
                        userList.OrderByDescending(c => c.Health.TotalActivities).ToList();
                    break;
            }
        }
    }

}