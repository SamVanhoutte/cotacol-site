@using CotacolApp.Models.CotacolApi
@using MatBlazor
@inject ICotacolClient CotacolClient
@inject ICotacolUserClient CotacolUserClient
@inject IMatDialogService MatDialogService

<table class="table">
    <tbody>
    <tr>
        <td class="lektonic">Synchronization status <em>(@_syncStatusRefreshDate.ToLocalTime().ToString("hh:mm:ss"))</em></td>
        <td>
            @if (_syncStatus == null)
            {
                <p class="lektonic">
                    <em>Loading...</em>
                </p>
            }
            else
            {
                <p class="lektonic">@_syncStatus.Processed / @_syncStatus.Total (@_syncStatus.Status)&nbsp;<MatIconButton OnClick="@(async () => await RefreshSyncStatusAsync())" Icon="refresh"></MatIconButton></p>
            }
        </td>
    </tr>
    <tr>
        <td class="lektonic">
            Full synchronization 
            @if (_syncRequestedTime != default)
            {
                <em>(@_syncRequestedTime.ToString("T"))</em>
            }
        </td>
        <td class="lektonic">
            <button @onclick="@(async () => await TriggerFullSyncAsync())" class="btn btn-primary" name="StravaSync" disabled="@_syncRequested">Full sync</button><em>@_syncMessage</em>
            <MatSnackbar @bind-IsOpen="@_syncRequested">
                <MatSnackbarContent>Synchronization requested.</MatSnackbarContent>
                <MatSnackbarActions>
                    <MatButton Raised="true" OnClick="RefreshSyncStatusAsync">Refresh</MatButton>
                </MatSnackbarActions>
            </MatSnackbar>
        </td>
    </tr>
    </tbody>
</table>

@code {

    private SyncStatus _syncStatus;
    private DateTime _syncStatusRefreshDate = DateTime.Now;
    private DateTime _syncRequestedTime = default;
    private bool _syncRequested = false;
    private string _syncMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await RefreshSyncStatusAsync();
    }

    private async Task RefreshSyncStatusAsync()
    {
        _syncStatusRefreshDate = DateTime.Now;
        try
        {
            _syncStatus = await CotacolUserClient.GetSyncStatus();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        _syncRequested = false;
    }

    private async Task TriggerFullSyncAsync()
    {
        var result = await MatDialogService.AskAsync("Synchronization takes long, are you sure you want this?", new[] {"Yes", "Cancel"});
        if (result.Equals("Yes", StringComparison.InvariantCultureIgnoreCase))
        {
            Console.WriteLine("Trigger sync");
            _syncRequested = true;
            try
            {
                var httpStatus = await CotacolUserClient.SynchronizeAsync();
                _syncRequestedTime = DateTime.Now;
                if (httpStatus <= 200 || httpStatus >= 300)
                {
                    _syncRequested = false;
                    _syncMessage = $"‚ùå (HTTP error {httpStatus}";
                }
            }
            catch (Exception e)
            {
                _syncMessage = e.Message;
            }
        }
    }



}