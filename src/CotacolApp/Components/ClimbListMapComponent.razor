@using GoogleMapsComponents
@using GoogleMapsComponents.Maps
@using CotacolApp.Services.Extensions
@using CotacolApp.Services.Maps
@inject ILogger<ClimbListMapComponent> Logger
@inject IJSRuntime JsRuntime
@inject IMapService MapService
@if (Climbs != null)
{
    <div @ref="@_mapElementRef" id="map1" style="height: 100vh;"></div>
}
else
{
    <span>
        <em>Loading map...</em>
    </span>
}


@code {
    private MapOptions _mapOptions;

    private IEnumerable<UserClimb> _climbList;
    private ElementReference _mapElementRef;
    private Map _map1;
    private MapLayout _previousLayout = new MapLayout();
    private int _previousZoom = 9;
    private int _polylineTreshold = 12;
    private int _arrowTreshold = 14;
    private bool _dataChanged = false;

    [Parameter]
    public IEnumerable<UserClimb> Climbs
    {
        get => _climbList;
        set
        {
            if (value == null || (_climbList?.Equals(value) ?? false)) return;
            _map1 = null;
            _dataChanged = true;
            _climbList = value;
            ClimbsChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<IEnumerable<UserClimb>> ClimbsChanged { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if (_climbList == null) Logger.LogWarning("[Initialize] climbList is null");

        _mapOptions = await MapService.GetLayoutAsync(false, _previousZoom);
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_map1 == null)
        {
            await InitializeMap();
        }
        var currentzoom = await _map1.GetZoom();
        var layout = CheckMapRequirements(firstRender, currentzoom);
        if (layout.RedrawNeeded)
        {
            _dataChanged = false;
            if (_climbList != null && _map1 != null)
            {
                await MapService.ShowClimbsAsync(_map1, JsRuntime, _climbList.ToList(), layout);
            }
        }
        _previousZoom = currentzoom;
        _previousLayout = layout;
        await base.OnAfterRenderAsync(firstRender);
    }


    private MapLayout CheckMapRequirements(bool firstRender, int currentzoom)
    {
        var layout = new MapLayout();
        // Redraw map, on first render, when map1 was reset or when data was changed
        layout.ShowStartFinish = currentzoom > _arrowTreshold;
        layout.ShowPolylines = currentzoom >= _polylineTreshold;
        layout.ShowMarkers = currentzoom <= _polylineTreshold;

        if (firstRender || _map1 == null || _dataChanged) layout.RedrawNeeded = true;
        if (layout.ShowStartFinish != _previousLayout.ShowStartFinish) layout.RedrawNeeded = true;
        if (layout.ShowPolylines != _previousLayout.ShowPolylines) layout.RedrawNeeded = true;
        if (layout.ShowMarkers != _previousLayout.ShowMarkers) layout.RedrawNeeded = true;

        Logger.LogInformation($"Map zoom input: current {currentzoom} - previous {_previousZoom} - Data changed: {_dataChanged} - Map empty: {_map1 == null}");
        Logger.LogInformation($"Map settings: redraw: {layout.RedrawNeeded} - lines: {layout.ShowPolylines} - arrows: {layout.ShowStartFinish}");

        return layout;
    }

    private async Task InitializeMap()
    {
        _mapOptions = await MapService.GetLayoutAsync(false, _previousZoom);
        _map1 = await Map.CreateAsync(JsRuntime, _mapElementRef, _mapOptions);
        await _map1.AddListener("zoom_changed", OnZoomChanged);
    }


    private async Task OnAfterInitAsync()
    {
        if (_map1 != null)
        {
            await _map1.AddListener("zoom_changed", OnZoomChanged);
        }
    }

    private void OnZoomChanged()
    {
        Logger.LogInformation("Zoom");
        StateHasChanged();
    }

}