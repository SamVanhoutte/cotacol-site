@using MatBlazor
@using CotacolApp.Services.Extensions
@inject ICotacolClient CotacolClient
@inject ICotacolUserClient CotacolUserClient
@inject IUserProfileManager UserProfile
@inject ILogger<ClimbListTableComponent> Logger


<div style="overflow-y: scroll; height:100vh;">

    <MatTable FilterByColumnName="@GetFilterColumn()" Items="@Climbs" class="lektonic" PageSize="2000"
              AllowSelection="false" 
              ShowPaging="false" UseSortHeaderRow="true">
        <MatTableHeader>
            <MatSortHeaderRow SortChanged="SortClimbs">
                <MatSortHeader SortId="id">#</MatSortHeader>
                <MatSortHeader SortId="name">
                    <span style="width:250px">Name</span>
                </MatSortHeader>
                <MatSortHeader SortId="province">Province</MatSortHeader>
                <MatSortHeader SortId="surface">Surface</MatSortHeader>
                <MatSortHeader SortId="points">Points</MatSortHeader>
                <MatSortHeader SortId="length">Length</MatSortHeader>
                <MatSortHeader SortId="elevation">Elevation</MatSortHeader>
                <MatSortHeader SortId="grade">Grade</MatSortHeader>
                <MatSortHeader SortId="bomb">
                    <span style="width:60px">Bomb#</span>
                </MatSortHeader>
                @if (UserProfile.IsAuthenticated)
                {
                    <MatSortHeader>Plan</MatSortHeader>
                }
                <MatSortHeader>Segment</MatSortHeader>
            </MatSortHeaderRow>
        </MatTableHeader>
        <MatTableRow>
            @if (context.Done)
            {
                <td style="background-color: #FD7D7A; color: white">@context.Id</td>
            }
            else
            {
                <td>@context.Id</td>
            }
            <td style="max-width: 200px">
                <b>
                    <a href="cotacol/@context.Id" target="_self">@context.Name</a>
                </b>
            </td>
            <td>@context.Province</td>
            <td>@context.Surface</td>
            <td style="text-align: right">@context.CotacolPoints</td>
            <td style="text-align: right">@context.Distance.Number() m</td>
            <td style="text-align: right">@context.ElevationDiff m</td>
            <td style="text-align: right">@context.AvgGrade.Percentage()</td>
            <td style="text-align: right">
                @if (context.BomScore > 0)
                {
                    <span>@context.BomScore</span>
                }
                else
                {
                    <span>-</span>
                }
            </td>
            @if (UserProfile.IsAuthenticated)
            {
                <td>
                    @if (context.Bookmarked)
                    {
                        <MatIconButton Icon="@MatIconNames.Favorite" OnClick="async() => await UnbookMarkClimb(context.Id)"></MatIconButton>
                    }
                    else
                    {
                        <MatIconButton Icon="@MatIconNames.Favorite_border" OnClick="async() => await BookMarkClimb(context.Id)"></MatIconButton>
                    }
                </td>
            }
            <td>
                <a href="https://www.strava.com/segments/@context.StravaSegment" target="_blank">
                    <img src="images/strava-logo-small.png" asp-append-version="true"/>
                </a>
                @if (UserProfile.IsAdmin)
                {
                    <a href="/admin/segments/@context.Id">Edit</a>
                }
            </td>
        </MatTableRow>
    </MatTable>
</div>

@code {
    private IEnumerable<UserClimb> _climbList;
    [Parameter]
    public bool HideFilters { get; set; }
    
    [Parameter]
    public IEnumerable<UserClimb> Climbs
    {
        get => _climbList;
        set
        {
            if (_climbList != null && _climbList.Equals(value)) return;

            _climbList = value;
            ClimbsChanged.InvokeAsync(value);
        }
    }


    [Parameter]
    public EventCallback<IEnumerable<UserClimb>> ClimbsChanged { get; set; }

    private void SortClimbs(MatSortChangedEvent sort)
    {
        if (!(sort == null || sort.Direction == MatSortDirection.None || string.IsNullOrEmpty(sort.SortId)) && Climbs != null)
        {
            switch (sort.SortId)
            {
                case "id":
                    Climbs = sort.Direction == MatSortDirection.Asc ?
                        Climbs.OrderBy(c => c.Id) :
                        Climbs.OrderByDescending(c => c.Id);
                    break;
                case "name":
                    Climbs = sort.Direction == MatSortDirection.Asc ?
                        Climbs.OrderBy(c => c.Name) :
                        Climbs.OrderByDescending(c => c.Name);
                    break;
                case "province":
                    Climbs = sort.Direction == MatSortDirection.Asc ?
                        Climbs.OrderBy(c => c.Province) :
                        Climbs.OrderByDescending(c => c.Province);
                    break;
                case "surface":
                    Climbs = sort.Direction == MatSortDirection.Asc ?
                        Climbs.OrderBy(c => c.Surface) :
                        Climbs.OrderByDescending(c => c.Surface);
                    break;
                case "points":
                    Climbs = sort.Direction == MatSortDirection.Asc ?
                        Climbs.OrderBy(c => c.CotacolPoints) :
                        Climbs.OrderByDescending(c => c.CotacolPoints);
                    break;
                case "length":
                    Climbs = sort.Direction == MatSortDirection.Asc ?
                        Climbs.OrderBy(c => c.Distance) :
                        Climbs.OrderByDescending(c => c.Distance);
                    break;
                case "elevation":
                    Climbs = sort.Direction == MatSortDirection.Asc ?
                        Climbs.OrderBy(c => c.ElevationDiff) :
                        Climbs.OrderByDescending(c => c.ElevationDiff);
                    break;
                case "grade":
                    Climbs = sort.Direction == MatSortDirection.Asc ?
                        Climbs.OrderBy(c => c.AvgGrade) :
                        Climbs.OrderByDescending(c => c.AvgGrade);
                    break;
                case "bomb":
                    Climbs = sort.Direction == MatSortDirection.Asc ?
                        Climbs.OrderByDescending(c => c.BomScore) :
                        Climbs.OrderBy(c => c.BomScore);
                    break;
            }
        }
    }


    private async Task BookMarkClimb(string colId)
    {
        try
        {
            var succeeded = await CotacolUserClient.BookmarkClimbAsync(colId);
            if (succeeded)
            {
                Climbs.First(c => c.Id.Equals(colId)).Bookmarked = true;
            }
            StateHasChanged();
        }
        catch (Exception e)
        {
        }
    }
    
    private async Task UnbookMarkClimb(string colId)
    {
        try
        {
            var succeeded = await CotacolUserClient.UnbookmarkClimbAsync(colId);
            if (succeeded)
            {
                Climbs.First(c => c.Id.Equals(colId)).Bookmarked = false;
            }
            StateHasChanged();
        }
        catch (Exception e)
        {
        }
    }

    private string GetFilterColumn()
    {
        return HideFilters ? null : "Name";
    }

}