@using MatBlazor
@using CotacolApp.Services.Extensions
@inject ICotacolClient CotacolClient
@inject ICotacolUserClient CotacolUserClient
@inject IUserProfileManager UserProfile
@inject ILogger<ClimbListTableComponent> Logger

@if (Climbs.Count() < 1000)
{
    <div>Showing @Climbs.Count() results.</div>
}
<MatDrawerContainer>
    <MatDrawer Mode="MatDrawerMode.Dismissible" @bind-Opened="@_colSelected" Style="width: 270px">
        <MatIconButton OnClick="CloseClimb">
            <MatIcon>@MatIconNames.Close</MatIcon>
        </MatIconButton>
        <ClimbDetailComponent Cotacol="@_selectedClimb"/>
    </MatDrawer>
    <MatDrawerContent>
        <div style="overflow-y: scroll; height:100vh;">

            <MatTable FilterByColumnName="Name" Items="@Climbs" class="lektonic" PageSize="2000"
                      AllowSelection="true" SelectionChanged="SelectionChanged"
                      ShowPaging="false" UseSortHeaderRow="true">
                <MatTableHeader>
                    <MatSortHeaderRow SortChanged="SortClimbs">
                        <MatSortHeader SortId="id">#</MatSortHeader>
                        <MatSortHeader SortId="name">
                            <span style="width:250px">Name</span>
                        </MatSortHeader>
                        <MatSortHeader SortId="province">Province</MatSortHeader>
                        <MatSortHeader SortId="surface">Surface</MatSortHeader>
                        <MatSortHeader SortId="points">Points</MatSortHeader>
                        <MatSortHeader SortId="length">Length</MatSortHeader>
                        <MatSortHeader SortId="elevation">Elevation</MatSortHeader>
                        <MatSortHeader SortId="grade">Grade</MatSortHeader>
                        <MatSortHeader>Segment</MatSortHeader>
                    </MatSortHeaderRow>
                </MatTableHeader>
                <MatTableRow>
                    <td>@context.Id</td>
                    @if (context.Done)
                    {
                        <td style="max-width: 200px">
                            <b>@context.Name.ToUpper()</b>
                        </td>
                    }
                    else
                    {
                        <td style="max-width: 200px">@context.Name</td>
                    }
                    <td>@context.Province</td>
                    <td>@context.Surface</td>
                    <td style="text-align: right">@context.CotacolPoints</td>
                    <td style="text-align: right">@context.Distance.Number() m</td>
                    <td style="text-align: right">@context.ElevationDiff m</td>
                    <td style="text-align: right">@context.AvgGrade.Percentage()</td>
                    <td>
                        <a href="@context.Url" target="_blank">
                            <img src="images/strava-logo-small.png" asp-append-version="true"/>
                        </a>
                    </td>
                </MatTableRow>
            </MatTable>
        </div>
    </MatDrawerContent>
</MatDrawerContainer>

@code {
    private IEnumerable<UserClimb> _climbList;

    [Parameter]
    public IEnumerable<UserClimb> Climbs
    {
        get => _climbList;
        set
        {
            if (_climbList != null && _climbList.Equals(value)) return;

            _climbList = value;
            ClimbsChanged.InvokeAsync(value);
        }
    }

    private UserClimb _selectedClimb = null;
    private bool _colSelected = false;


    [Parameter]
    public EventCallback<IEnumerable<UserClimb>> ClimbsChanged { get; set; }


    private void SortClimbs(MatSortChangedEvent sort)
    {
        if (!(sort == null || sort.Direction == MatSortDirection.None || string.IsNullOrEmpty(sort.SortId)) && Climbs != null)
        {
            switch (sort.SortId)
            {
                case "id":
                    Climbs = sort.Direction == MatSortDirection.Asc ?
                        Climbs.OrderBy(c => c.Id) :
                        Climbs.OrderByDescending(c => c.Id);
                    break;
                case "name":
                    Climbs = sort.Direction == MatSortDirection.Asc ?
                        Climbs.OrderBy(c => c.Name) :
                        Climbs.OrderByDescending(c => c.Name);
                    break;
                case "province":
                    Climbs = sort.Direction == MatSortDirection.Asc ?
                        Climbs.OrderBy(c => c.Province) :
                        Climbs.OrderByDescending(c => c.Province);
                    break;
                case "surface":
                    Climbs = sort.Direction == MatSortDirection.Asc ?
                        Climbs.OrderBy(c => c.Surface) :
                        Climbs.OrderByDescending(c => c.Surface);
                    break;
                case "points":
                    Climbs = sort.Direction == MatSortDirection.Asc ?
                        Climbs.OrderBy(c => c.CotacolPoints) :
                        Climbs.OrderByDescending(c => c.CotacolPoints);
                    break;
                case "length":
                    Climbs = sort.Direction == MatSortDirection.Asc ?
                        Climbs.OrderBy(c => c.Distance) :
                        Climbs.OrderByDescending(c => c.Distance);
                    break;
                case "elevation":
                    Climbs = sort.Direction == MatSortDirection.Asc ?
                        Climbs.OrderBy(c => c.ElevationDiff) :
                        Climbs.OrderByDescending(c => c.ElevationDiff);
                    break;
                case "grade":
                    Climbs = sort.Direction == MatSortDirection.Asc ?
                        Climbs.OrderBy(c => c.AvgGrade) :
                        Climbs.OrderByDescending(c => c.AvgGrade);
                    break;
            }
        }
    }

    private void CloseClimb()
    {
        _selectedClimb = null;
        _colSelected = false;
        StateHasChanged();
    }

    private void SelectionChanged(object col)
    {
        if (col is UserClimb climb)
        {
            _selectedClimb = climb;
            Console.WriteLine(climb.Name);
            StateHasChanged();
        }
        _colSelected = col != null;
    }

}