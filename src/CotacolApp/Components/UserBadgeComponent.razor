@using CotacolApp.Models.CotacolApi
@using MatBlazor

<div class="mat-layout-grid-cell-span-2">
    <a href="@GetHref()">
        <div data-text="@GetDescription()"
             class="cctooltip">
            @if (BadgeStatus.Completed)
            {
                <img src='@($"images/badges/{BadgeStatus.BadgeId}.png")' onerror="this.onerror=null; this.src='images/badges/default.png'" alt="@BadgeStatus.Description" style='width: @Width;'/>
            }
            else
            {
                <img src='@($"images/badges/{BadgeStatus.BadgeId}.png")' onerror="this.onerror=null; this.src='images/badges/default.png'" alt="@BadgeStatus.Description" style='z-index: 0; width: @Width;-webkit-filter: grayscale(100%); filter: grayscale(100%);'/>
            }
            <div class="lektonic" style="text-align: center; background-color: silver; width: 100%; height: 50px">@BadgeStatus.Name</div><MatProgressBar Progress="@BadgeStatus.Progress" Style="width:100%"></MatProgressBar>
            @if (BadgeStatus.Completed)
            {
                <p class="lektonic" style="text-align: center">
                    <b>Completed @(BadgeStatus.AchievementDate?.Date.ToString("dd MMM yy"))</b>
                </p>
            }
            else
            {
                <p class="lektonic" style="text-align: center">
                    <b>@(BadgeStatus.NumberColsNeeded - BadgeStatus.NumberColsAchieved) cols missing</b>
                </p>
            }
        </div>
    </a>
</div>

@code {

    [Parameter]
    public UserBadgeStatus BadgeStatus { get; set; }
    [Parameter]
    public string UserId { get; set; }

    [Parameter]
    public string Width { get; set; } = "100%";

    private string GetHref()
    {
        if ((BadgeStatus?.ValidFrom ?? DateTime.MinValue) < DateTime.Today)
        {
            if (string.IsNullOrEmpty(UserId))
            {
                return $"badge/{BadgeStatus.BadgeId}";
            }
            return $"badge/{BadgeStatus.BadgeId}/{UserId}";
        }
        return "javascript: void(0)";
    }
    
    private string GetDescription()
    {
        if ((BadgeStatus?.ValidFrom ?? DateTime.MinValue) < DateTime.Today)
        {
            return BadgeStatus.Description;
        }
        return $"Badge only active as from {BadgeStatus.ValidFrom:MMM dd}";
    }
}