@using MatBlazor
@using CotacolApp.Services.Extensions
@inject ICotacolClient CotacolClient
@inject ICotacolUserClient CotacolUserClient
@inject IUserProfileManager UserProfile
@inject ILogger<ClimbListComponent> Logger

@if (_climbs == null)
{
    <p>
        <em>We're getting the climbs , please be patient...</em>
    </p>
}
else
{
    <MatChipSet Choice="true" SelectedChipChanged="ApplyFilter">
        <MatChip Label="All" Id="NoFilter"></MatChip>
        @if (UserProfile.IsAuthenticated)
        {
            <MatChip Label="Done" Id="DoneFilter"></MatChip>
            <!--<MatChip Label="Planned" Id="PlannedFilter"></MatChip>-->
            <MatChip Label="To do" Id="TodoFilter"></MatChip>
        }
        <MatChip Label="Top 50" Id="TopFilter"></MatChip>
        <MatChip Label="Easiest" Id="EasyFilter"></MatChip>
        <MatChip Label="Highest" Id="HighFilter"></MatChip>
        <MatChip Label="Longest" Id="LongFilter"></MatChip>
        <MatChip Label="Steepest" Id="SteepFilter"></MatChip>
    </MatChipSet>
    <MatChipSet Id="ProvinceFilter" Choice="false" Filter="true" SelectedChipChanged="ApplyProvinceFilter">
        <MatChip Label="WFL" IsCheckable="true" Id="WestVlFilter"></MatChip>
        <MatChip Label="EFL" IsCheckable="true" Id="OostVlFilter"></MatChip>
        <MatChip Label="ANT" IsCheckable="true" Id="AntwerpenFilter"></MatChip>
        <MatChip Label="LIM" IsCheckable="true" Id="LimburgFilter"></MatChip>
        <MatChip Label="BRU" IsCheckable="true" Id="BrusselsFilter"></MatChip>
        <MatChip Label="FLB" IsCheckable="true" Id="VlBrFilter"></MatChip>
        <MatChip Label="WLB" IsCheckable="true" Id="BrabantWallonFilter"></MatChip>
        <MatChip Label="HNT" IsCheckable="true" Id="HainautFilter"></MatChip>
        <MatChip Label="NAM" IsCheckable="true" Id="NamurFilter"></MatChip>
        <MatChip Label="LIE" IsCheckable="true" Id="LiegeFilter"></MatChip>
        <MatChip Label="LUX" IsCheckable="true" Id="LuxemburgFilter"></MatChip>
    </MatChipSet>
    @if(Mode== ClimbViewMode.Table)
    {
        <ClimbListTableComponent @bind-Climbs="@_climbs" />
    }
    else
    {
        <ClimbListMapComponent @bind-Climbs="@_climbs" />
    }
}

@code {

    [Parameter]
    public ClimbViewMode Mode  { get; set; }
    
    private string _currentFilter = "nofilter";
    private List<string> _provinceFilters = null;
    private IEnumerable<UserClimb> _climbList;
    private IEnumerable<UserClimb> _climbs;

    protected override async Task OnInitializedAsync()
    {
        if (UserProfile.IsAuthenticated)
        {
            _climbList = await CotacolUserClient.GetClimbDataAsync();
        }
        else
        {
            _climbList = (await CotacolClient.GetClimbDataAsync()).Select(climb => new UserClimb(climb));
        }
        _climbs = _climbList;
    }

    private void ApplyProvinceFilter(MatChip filter)
    {
        if (filter == null)
        {
            _provinceFilters = null;
        }
        else
        {
            _provinceFilters = filter.ChipSet.SelectedChips
                .Select(chip => GetSystemName(chip.Id)).ToList();
        }
        FilterClimbs();
    }

    private void ApplyFilter(MatChip filter)
    {
        _currentFilter = filter.Id;
        FilterClimbs();
    }

    private string GetSystemName(string value)
    {
        return value.Replace("Filter", "")
            .Replace(" ", "")
            .Replace("-", "")
            .ToLower();
    }

    private void FilterClimbs()
    {
        _climbs = _climbList;

        // Filter on category
        switch (_currentFilter.ToLower())
        {
            case "nofilter":
                break;
            case "donefilter":
                _climbs = _climbList.Where(c => c.Done);
                break;
            case "todofilter":
                _climbs = _climbList.Where(c => !c.Done);
                break;
            case "topfilter":
                _climbs = _climbList.OrderByDescending(c => c.CotacolPoints).Take(50);
                break;
            case "easyfilter":
                _climbs = _climbList.OrderBy(c => c.CotacolPoints).Take(50);
                break;
            case "highfilter":
                _climbs = _climbList.OrderByDescending(c => c.ElevationDiff).Take(50);
                break;
            case "longfilter":
                _climbs = _climbList.OrderByDescending(c => c.Distance).Take(50);
                break;
            case "steepfilter":
                _climbs = _climbList.OrderByDescending(c => c.AvgGrade).Take(50);
                break;
        }

    // Filter on province
        if (_provinceFilters?.Any() ?? false)
        {
            _climbs = _climbs.Where(c =>
                _provinceFilters.Any(province => GetSystemName(province).Equals(GetSystemName(c.Province))));
        }
    }
}