@using AeroBlazor.Extensions
@using AeroBlazor.Theming
@using Cotacol.Website.Models.CotacolApi
@using System.Text
@using Cotacol.Website.Components.Dialogs
@using Newtonsoft.Json.Linq
@inject ICotacolClient CotacolClient
@inject IUserProfileManager UserProfile
@inject NavigationManager NavManager
@inject IThemeManager ThemeManager
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService
<script>
    function downloadFileFromByteArray(filename, contentType, byteArray) {
        const blob = new Blob([new Uint8Array(byteArray)], {type: contentType});
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = filename;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
</script>
<CotacolEmailVerification @bind-Email="@emailAddress"></CotacolEmailVerification>
@if (!string.IsNullOrEmpty(emailAddress))
{

    @if (queryLaunched && supportCase == null)
    {
        <MudItem xs="12">
            <AeroLoader WaitingMessage="Loading ticket"></AeroLoader>
        </MudItem>
    }

    <hr/>
    
    @if (supportCase != null)
    {
        <MudGrid>
            @if (AdminView)
            {
                <MudItem xs="12">
                    <AeroFlexContainer CenterAlign="true">
                        <UserAdminLinks UserId="@supportCase.UserId"></UserAdminLinks>
                    </AeroFlexContainer>
                </MudItem>
            }
            <MudItem xs="3">
                <AeroLabel Name="Created on" Value="@supportCase.CreationTime.PrintHistoricalDate()"></AeroLabel>
            </MudItem>
            <MudItem xs="3">
                <AeroLabel Name="Updated on" Value="@supportCase.UpdatedTime.PrintHistoricalDate()"></AeroLabel>
            </MudItem>
            <MudItem xs="3">
                <AeroLabel Name="Active status" Value="@supportCase.ActiveStatus.ToString()"/>
            </MudItem>
            <MudItem xs="3">
                <AeroLabel Name="Case type" Value="@supportCase.CaseType"/>
            </MudItem>
        </MudGrid>
        <MudGrid>
            <MudItem xs="12">
                <AeroDivider Type="AeroDividerType.Line"></AeroDivider>
            </MudItem>
            <MudItem xs="3">
                <AeroLabel Name="Case id" AllowCopy="true"
                           Value="@supportCase.CaseId.ToString()"></AeroLabel>
            </MudItem>
            <MudItem xs="3">
                <AeroLabel Name="User" Href='@($"admin/users/{supportCase.UserId}")' AllowCopy="true"
                           Value="@(supportCase.UserName ?? supportCase.UserId)"></AeroLabel>
            </MudItem>
            <MudItem xs="3">
                @if(!string.IsNullOrEmpty(activityId))
                {
                    <AeroLabel Name="Activity" AllowCopy="true" Href="@($"https://www.strava.com/activities/{activityId}")" Target="_blank" 
                               Value="@activityId"></AeroLabel>
                }
            </MudItem>
            <MudItem xs="3">
                @if(!string.IsNullOrEmpty(cotacolId))
                {
                    <AeroLabel Name="Cotacol" AllowCopy="true" Href="@($"/admin/segments/{cotacolId}")" Target="_blank"
                               Value="@cotacolName" CopyValue="@cotacolId"></AeroLabel>
                }
            </MudItem>
            <MudItem xs="12">
                <AeroDivider Type="AeroDividerType.Line"></AeroDivider>
            </MudItem>
            <MudItem xs="6">
                <MudTextField T="string" @bind-Value="@supportCase.EmailAddress" Label="Email address"></MudTextField>
            </MudItem>
            <MudItem xs="6">
                <AeroFlexContainer RightAlign="true" FullWidth="true">
                    @if (!string.IsNullOrEmpty(supportCase.ReportContent))
                    {
                        <AeroButton OnClick="@(async () => await DownloadReportAsync())">Download report</AeroButton>
                    }
                </AeroFlexContainer>
            </MudItem>
        </MudGrid>
        <MudGrid>
            <MudItem xs="6">
                <MudTextField Lines="10" T="string" Variant="Variant.Text" @bind-Value="@supportCase.Description"
                              Label="Case details">
                </MudTextField>
                <AeroFlexContainer>
                    <AeroButton Mode="AeroButton.ButtonMode.Subtle" IsLoading="@updateRequested"
                                OnClick="@(async () => await UpdateCaseAsync(supportCase.ActiveStatus))">Update case
                    </AeroButton>
                    <AeroDivider Minimal="false" Type="AeroDividerType.Blank"></AeroDivider>
                    <AeroButton IsLoading="@updateRequested"
                                OnClick="@(async () => await UpdateCaseAsync(CaseStatus.Closed))">Close case
                    </AeroButton>
                    <AeroDivider Minimal="true" Type="AeroDividerType.Blank"></AeroDivider>
                    <AeroButton IsLoading="@updateRequested"
                                OnClick="@(async () => await UpdateCaseAsync(CaseStatus.Solved))">Case solved
                    </AeroButton>
                    @if (AdminView)
                    {
                        <AeroDivider Minimal="true" Type="AeroDividerType.Blank"></AeroDivider>
                        <AeroButton IsLoading="@updateRequested"
                                    OnClick="@(async () => await UpdateCaseAsync(CaseStatus.WaitingForUser))">Wait for user
                        </AeroButton>
                    }
                </AeroFlexContainer>
            </MudItem>
            <MudItem xs="6">
                <MudGrid>
                    @if (chatsLoading)
                    {
                        <AeroLoader Small="true" WaitingMessage="Loading chats"></AeroLoader>
                    }
                    @if (supportCase.Chats?.Any() ?? false)
                    {
                        @foreach (var chat in supportCase.Chats)
                        {
                            <MudItem xs="6">
                                <AeroLabel Value="@(chat.UserName ?? chat.UserId)"></AeroLabel>
                            </MudItem>
                            <MudItem xs="6">
                                <AeroLabel Value="@chat.Timestamp.PrintHistoricalTime()"></AeroLabel>
                            </MudItem>
                            <MudItem xs="12">
                                <MudTextField ReadOnly="true" T="string" Variant="Variant.Text" Value="@chat.Message"
                                              Label="Message"></MudTextField>
                            </MudItem>
                        }
                        <MudItem xs="12">
                            <AeroButton OnClick="@(async () => await ReplyAsync())">Reply</AeroButton>
                        </MudItem>
                    }
                    else
                    {
                        <MudItem xs="12">
                            <AeroButton OnClick="@(async () => await ReplyAsync())">Add message</AeroButton>
                        </MudItem>
                    }
                </MudGrid>
            </MudItem>
        </MudGrid>
    }
}

@code {
    [Parameter] public bool AdminView { get; set; }
    [Parameter] public string CaseId { get; set; }
    private string? emailAddress = "";

    SupportCase? supportCase;
    private bool loadSync = false;
    private bool queryLaunched = false;
    private bool chatsLoading = false;
    private string searchString;
    private string activityId;
    private string cotacolId;
    private string cotacolName;
    private bool updateRequested = false;
    private AeroDialogWindow chatPopup=null!;
    protected override async Task OnInitializedAsync()
    {
        await LoadTicketAsync();
    }

    private async Task LoadTicketAsync(bool afterChat = false)
    {
        if (UserProfile.IsAdmin)
        {
            queryLaunched = afterChat ==false;
            chatsLoading = afterChat;
            StateHasChanged();
            supportCase = await CotacolClient.GetSupportCaseAsync(CaseId);
            await LoadMissingDataAsync();
            queryLaunched = false;
            chatsLoading = false;
        }
    }

    private async Task LoadMissingDataAsync()
    {
        if (supportCase != null)
        {
            if (!string.IsNullOrEmpty(supportCase.ReportContent) && supportCase.CaseType.Equals("missingcol", StringComparison.InvariantCultureIgnoreCase))
            {
                try
                {
                    var jsonObject = JObject.Parse(supportCase.ReportContent);
                    activityId = jsonObject.SelectToken("MissingData.Activity.ActivityId")?.ToString();
                cotacolId = jsonObject.SelectToken("MissingData.Cotacol.id")?.ToString();
                cotacolName = jsonObject.SelectToken("MissingData.Cotacol.name")?.ToString();
                }
                catch (Exception e)
                {
                    Console.WriteLine(e);
                }

            }
        }
    }
    private async Task UpdateCaseAsync(CaseStatus newStatus)
    {
        try
        {
            updateRequested = true;
            await CotacolClient.UpdateSupportCaseAsync(CaseId, new SupportCaseUpdate
            {
                Description = supportCase.Description, EmailAddress = supportCase.EmailAddress, NewStatus = newStatus
            });
            NavManager.NavigateTo("admin/support");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        finally
        {
            updateRequested = false;
        }
    }

    private async Task DownloadReportAsync()
    {
        await JSRuntime.InvokeVoidAsync("downloadFileFromByteArray", $"report-{CaseId}.json", "text/json", Encoding.UTF8.GetBytes(supportCase.ReportContent));
    }

    private async Task ReplyAsync()
    {
        var parameters = new DialogParameters<SupportChatDialog>
        {
            { nameof(SupportChatDialog.Email), emailAddress },
            { nameof(SupportChatDialog.CaseId), CaseId }
        };
        var dialog = await DialogService.ShowAsync<SupportChatDialog>("Send reply", parameters, AeroDialog.BlurryDialogOptions);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadTicketAsync(true);
        }
    }
}