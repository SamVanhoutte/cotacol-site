@using AeroBlazor.Theming
@using MudBlazor.Utilities
@inherits LayoutComponentBase
@inject IThemeManager ThemeManager
<style>
    .sticky-bottom-div {
        position: fixed;
        bottom: 0;
        left: 0;
        /*width: 100%; !* Ensuring it spans the full width of the viewport *!*/
        /*background-color: #fff; !* Or any color you prefer *!*/
        z-index: 1000; /* To ensure it stays on top of other content */
    }
</style>
<CascadingValue Value="this">
    <MudThemeProvider DefaultScrollbar="true" IsDarkMode="false" Theme="@ThemeManager.CurrentTheme"/>
    <MudDialogProvider/>
    <MudSnackbarProvider/>
    <MudPopoverProvider />
    <PageTitle>Cotacol.cc</PageTitle>

    <div class="page">
        <div class="sidebar">
            <NavMenu/>
            <div class="sticky-bottom-div">
                <MudIconButton Color="Color.Tertiary" Href="/about" Icon="@Icons.Material.Filled.Info"></MudIconButton>
                <MudIconButton Color="Color.Info" Href="/support" Icon="@Icons.Material.Filled.SupportAgent"></MudIconButton>
            </div>
        </div>

        <main>
            <MudGrid Spacing="0">
                <MudItem md="6" xs="12">
                    <div class="top-row-left">
                        <MudText Typo="Typo.h1" Align="Align.Left">@Title</MudText>
                    </div>
                </MudItem>
                <MudItem md="6" xs="12">
                    <div class="top-row px-4">
                        <LoginDisplay/>
                    </div>
                </MudItem>
                <MudItem xs="12">
                    <div style="width: 100%">
                        <article class="content px-4">
                            @Body
                        </article>
                    </div>
                </MudItem>
            </MudGrid>

        </main>
    </div>
</CascadingValue>

@code{

    private string title = "Cotacol";

    public string Title
    {
        get => title;
        set
        {
            title = value;
            InvokeAsync(() => StateHasChanged());
        }
    }
}