@page "/achievements"
@page "/achievements/{UserId}"
@using Cotacol.Website.Models.CotacolApi
@using Cotacol.Website.Models
@inject ICotacolUserClient CotacolUserClient
@inject IUserProfileManager UserProfile
@inject NavigationManager LinkManager

<AuthorizeView>
    <NotAuthorized>
        @if (true)
        {
            LinkManager.NavigateTo(UserProfile.GetLoginLink(), true);
        }
    </NotAuthorized>
    <Authorized>
        <MudGrid Spacing="0">
            @if (!string.IsNullOrEmpty(notAuthorizedMessage))
            {
                <MudItem xs="12">
                    <ErrorDisplay ErrorMessage="_notAuthorizedMessage"/>
                </MudItem>
            }
            else
            {
                @if (achievements == null)
                {
                    <MudItem xs="12">
                        <AeroLoader WaitingMessage="We're retrieving the results , please be patient..."/>
                    </MudItem>
                }
                else
                {
                    <MudItem xs="12">
                        <UserAdminLinks UserId="@UserId"/>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <AeroSubtitle>Your year in a Pic</AeroSubtitle>
                        <MudLink Href='@($"img/year/{UserIdToShow}")' Target="_blank">
                            <MudImage id="cotacolwrapped" Src='@($"img/year/{UserIdToShow}")' Width="350"></MudImage>
                        </MudLink>
                        <MudText Typo="Typo.body1">Share you achievements with your friends on social media!</MudText>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <AeroSubtitle>Evolution</AeroSubtitle>
                        <MudText Typo="Typo.body1">Total points: @achievements.TotalScore.Number()</MudText>
                        <MudText Typo="Typo.body1">Unique cols: @achievements.UniqueCols.Number()</MudText>
                        <AchievementChartComponent Achievements="@achievements"/>
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <AeroSubtitle>Your most popular climbs</AeroSubtitle>
                        @if (string.IsNullOrEmpty(UserId))
                        {
                            <MudText Typo="Typo.body1">These climbs are the climbs you ride the most, the stars indicate you're local legend.</MudText>
                        }
                        else
                        {
                            <MudText Typo="Typo.body1">These climbs are the climbs the user rode the most, the stars indicate the user is a local legend.</MudText>
                        }
                        <MudList T="string">
                            @foreach (var climb in achievements.ColResults.OrderByDescending(cr => cr.Achievements.Count()).Take(10))
                            {
                                    <MudListItem Href='@($"cotacol/{climb.CotacolId}")'>
                                        <AvatarContent><MudAvatar><MudIcon Icon="@(achievements.LocalLegends.Any(leg => leg.Key.Equals(climb.CotacolId)) ? Icons.Material.Filled.Star : Icons.Material.Filled.ArrowUpward)" Color="Color.Secondary"></MudIcon></MudAvatar></AvatarContent>
                                        <ChildContent>@climb.CotacolName (@climb.Achievements.Count() attempts)</ChildContent>
                                    </MudListItem>
                            }
                        </MudList>
                    </MudItem>


                    @if (nearLegendClimbs.Any() || achievements.LocalLegends.Any())
                    {
                        <MudItem xs="12" md="6">
                            <MudGrid>
                                @if (achievements.LocalLegends.Any())
                                {
                                    <MudItem xs="12">
                                        <AeroSubtitle>You're a local legend</AeroSubtitle>
                                        <MudText Typo="Typo.body1">You are local legend if you did a col more than 5 times and no other user did more than you. These cols are owned by you, as a local legend:</MudText>
                                        <MudList T="string">
                                            @foreach (var legend in achievements.LocalLegends.OrderByDescending(cr => cr.Value))
                                            {
                                                <MudListItem Href='@($"cotacol/{legend.Key}")'>
                                                    <AvatarContent>
                                                        <MudAvatar>
                                                            <MudIcon Icon="@Icons.Material.Filled.Star" Color="Color.Secondary"></MudIcon>
                                                        </MudAvatar>
                                                    </AvatarContent>
                                                    <ChildContent>@GetLegendString(legend.Key)</ChildContent>
                                                </MudListItem>
                                                <MudDivider DividerType="DividerType.Inset"/>
                                            }
                                        </MudList>
                                    </MudItem>
                                }
                                @if (nearLegendClimbs.Any())
                                {
                                    <MudItem xs="12">
                                        <AeroSubtitle>Ready to become a legend?</AeroSubtitle>
                                        <MudText Typo="Typo.body1" Color="Color.Tertiary">These cols require few attempts for you to become Local Legend</MudText>
                                        <MudList T="string">
                                            @foreach (var climb in nearLegendClimbs)
                                            {
                                                <MudListItem Href='@($"cotacol/{climb.Id}")'>
                                                    <AvatarContent>
                                                        <MudAvatar><MudIcon Icon="@GetLegendIcon(climb.AttemptsNeededToLegend)"></MudIcon></MudAvatar>
                                                    </AvatarContent>
                                                    <ChildContent>
                                                        @climb.Name (@climb.AttemptsNeededToLegend attempts needed)
                                                    </ChildContent>
                                                </MudListItem>
                                                <MudDivider DividerType="DividerType.Inset"/>
                                            }
                                        </MudList>
                                    </MudItem>
                                }
                            </MudGrid>
                        </MudItem>
                    }
                    @if (UserProfile.IsAdmin)
                    {
                        <MudItem xs="12">
                            <AeroSubtitle>Completed badges</AeroSubtitle>
                            <br/>
                        </MudItem>
                        <MudItem xs="12">
                            <MudGrid>
                                @foreach (var badge in userBadges.Where(ub => ub.Completed).OrderBy(ub => ub.AchievementDate))
                                {
                                    <MudItem xs="3" md="2">
                                        <UserBadgeComponent BadgeStatus="badge" UserId="@UserIdToShow"></UserBadgeComponent>
                                    </MudItem>
                                }
                            </MudGrid>
                        </MudItem>
                        <MudItem xs="12">
                            <MudButton Variant="Variant.Filled" Color="Color.Secondary" Href='@($"badges/{UserIdToShow}")' EndIcon="@Icons.Material.Filled.List">View all badges</MudButton>
                        </MudItem>
                    }
                }
            }
        </MudGrid>
    </Authorized>
</AuthorizeView>

@code {

    [Parameter]
    public string UserId { get; set; }

    [CascadingParameter]
    public MainLayout Layout { get; set; } = null!;

    internal string UserIdToShow => string.IsNullOrEmpty(UserId) ? UserProfile.UserId : UserId;

    private string GetLegendIcon(int colsNeeded)
    {
        switch (colsNeeded)
        {
            case 1:
                return Icons.Material.Outlined.LooksOne;
            case 2:
                return Icons.Material.Outlined.LooksTwo;
            case 3:
                return Icons.Material.Outlined.Looks3;
            case 4:
                return Icons.Material.Outlined.Looks4;
            default:
                return Icons.Material.Outlined.Favorite;
        }
    }

    private UserAchievements? achievements;
    private IEnumerable<UserClimb>? climbs;
    private IEnumerable<UserClimb>? nearLegendClimbs;
    private UserProfile? userProfile;
    private string? notAuthorizedMessage;
    private List<UserBadgeStatus>? userBadges;

    protected override async Task OnInitializedAsync()
    {
        if (UserProfile.IsAuthenticated || !string.IsNullOrEmpty(UserId))
        {
            userProfile = await CotacolUserClient.GetProfileAsync(UserIdToShow);
            if (userProfile?.RequiresBackendSync ?? true)
            {
                LinkManager.NavigateTo("settings?authRequired=true", true);
            }
            else
            {
                Layout.Title = GetUserName();

                if (userProfile.Settings.PrivateProfile && !string.IsNullOrEmpty(UserId) && !UserProfile.IsAdmin)
                {
                    notAuthorizedMessage = "The user profile is not public";
                    return;
                }
                achievements = await CotacolUserClient.GetAchievementsAsync(UserIdToShow, true);
                climbs = await CotacolUserClient.GetClimbDataAsync(UserIdToShow);
                userBadges = await CotacolUserClient.GetBadgesAsync(UserIdToShow);
                nearLegendClimbs = climbs.Where(c => c.AttemptsNeededToLegend == 1);
                if (!nearLegendClimbs.Any())
                {
                    nearLegendClimbs = climbs
                        .Where(c => c.AttemptsNeededToLegend is >0 and <= 3)
                        .OrderBy(c => c.AttemptsNeededToLegend)
                        .Take(10);
                }
            }
        }
    }

    private string GetUserName()
    {
        if (string.IsNullOrEmpty(UserId))
        {
            return UserProfile.FullName;
        }
        return userProfile?.FullName ?? "User's achievements";
    }


    private string GetLegendString(string colId)
    {
        var col = achievements.ColResults.FirstOrDefault(cr => cr.CotacolId.Equals(colId));
        return $" {col.CotacolId} {col.CotacolName} - {col.Achievements.Count} attempts";
    }

}