@page "/badges"
@page "/badges/{UserId}"
@using Cotacol.Website.Models.CotacolApi
@inject ICotacolClient CotacolClient
@inject ICotacolUserClient CotacolUserClient
@inject IUserProfileManager UserProfile
@inject ILogger<Climbs> Logger
@inject NavigationManager NavManager
<AuthorizeView>
    <NotAuthorized>
        @if (true)
        {
            NavManager.NavigateTo(UserProfile.GetLoginLink(), true);
        }
    </NotAuthorized>
    <Authorized>
        <MudGrid Spacing="2">
            @if (UserProfile.IsAdmin)
            {
                <MudItem xs="12">
                    <UserAdminLinks UserId="@UserId"/>
                </MudItem>
            }
            @if (_userBadges == null)
            {
                <MudItem xs="12">
                    <AeroLoader WaitingMessage="We're retrieving the badges , please be patient..."/>
                </MudItem>
            }
            else
            {
                <UserBadgeCategoryListComponent Title="Provinces" Badges="@(_userBadges.Where(ub => ub.BadgeId.StartsWith("provinc", StringComparison.InvariantCultureIgnoreCase)).OrderBy(ub => ub.BadgeId))" UserId="@UserIdToShow"></UserBadgeCategoryListComponent>
                <UserBadgeCategoryListComponent Title="Quantity badges" Badges="@(_userBadges.Where(ub => ub.BadgeType.Equals(BadgeType.Amount)).OrderBy(ub => ub.NumberColsNeeded))" UserId="@UserIdToShow"></UserBadgeCategoryListComponent>
                <UserBadgeCategoryListComponent Title="List badges" Badges="@(_userBadges.Where(ub => ub.BadgeType.Equals(BadgeType.List) && !ub.BadgeId.StartsWith("prov")).OrderBy(ub => ub.NumberColsNeeded))" UserId="@UserIdToShow"></UserBadgeCategoryListComponent>
                <UserBadgeCategoryListComponent Title="Location badges" Badges="@(_userBadges.Where(ub => ub.BadgeType.Equals(BadgeType.Location) && !ub.BadgeId.StartsWith("prov")).OrderBy(ub => ub.NumberColsNeeded))" UserId="@UserIdToShow"></UserBadgeCategoryListComponent>
            }
        </MudGrid>
    </Authorized>
</AuthorizeView>

@code {

    [Parameter]
    public string UserId { get; set; }

    [CascadingParameter]
    public MainLayout Layout { get; set; } = null!;

    internal string UserIdToShow => string.IsNullOrEmpty(UserId) ? UserProfile.UserId : UserId;

    private UserProfile _userProfile;
    private string _notAuthorizedMessage;
    private List<UserBadgeStatus> _userBadges;

    protected override async Task OnInitializedAsync()
    {
        if (UserProfile.IsAuthenticated || !string.IsNullOrEmpty(UserId))
        {
            Layout.Title = GetPageTitle();

            _userProfile = await CotacolUserClient.GetProfileAsync(UserIdToShow);
            if (_userProfile.Settings.PrivateProfile && !string.IsNullOrEmpty(UserId) && !UserProfile.IsAdmin)
            {
                _notAuthorizedMessage = "The user profile is not public";
                return;
            }
            _userBadges = await CotacolUserClient.GetBadgesAsync(UserIdToShow);
        }
    }

    private string GetPageTitle()
    {
        if (string.IsNullOrEmpty(UserId))
        {
            return $"{UserProfile.FullName} badges";
        }
        return _userProfile?.FullName ?? "User's badges";
    }

}