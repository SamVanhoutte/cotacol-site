@page "/settings"
@page "/settings/{UserId}"
@using AeroBlazor.Extensions
@using Cotacol.Website.Models.CotacolApi
@inject ICotacolClient CotacolClient
@inject ICotacolUserClient CotacolUserClient
@inject IUserProfileManager UserProfile
@inject ILogger<Climbs> Logger
@inject NavigationManager NavManager
@inject IHttpContextAccessor HttpContextAccessor
<AuthorizeView>
    <NotAuthorized>
        @if (true)
        {
            // NavManager.NavigateTo(UserProfile.GetLoginLink(), true);
        }
    </NotAuthorized>
    <Authorized>
    </Authorized>
</AuthorizeView>
<MudGrid>
    @if (UserProfile.IsAdmin)
    {
        <MudItem xs="12">
            <UserAdminLinks UserId="@UserIdToShow"/>
        </MudItem>
    }
    @if (StravaAuthRequired)
    {
        <MudItem xs="12" lg="5">
            <MudText Typo="Typo.body1">It seems we need your Strava authorization at our backend. Please click the link below and come back to refresh, after you successfully authenticated against Strava.</MudText>
            <AeroButton OnClick="() => StravaAuthRequired = false" StartIcon="@Icons.Material.Filled.Link" Target="_blank" Href="http://www.strava.com/oauth/authorize?client_id=4987&response_type=code&redirect_uri=https://cotacol-hunting-workers.azurewebsites.net/api/StravaTokenHttpTrigger&approval_prompt=force&state=cotacolll&scope=read,read_all,activity:read_all,activity:read,activity:write,profile:write">Re-Authorize Strava</AeroButton>
            <MudText Typo="Typo.body1">After doing so, please log-off and log-on again. Apologies for this inconvenience.</MudText>
        </MudItem>
    }
    else
    {
        <MudItem xs="6" md="4">
            @if (!string.IsNullOrEmpty(_notAuthorizedMessage))
            {
                <MudText Typo="Typo.body1" Color="Color.Warning">@_notAuthorizedMessage</MudText>
            }
            else
            {
                <MudGrid>
                    @if (userProfile != null)
                    {
                        <MudItem xs="12">
                            <AeroSubtitle>Your settings</AeroSubtitle>
                        </MudItem>
                        @if (!string.IsNullOrEmpty(StatusMessage))
                        {
                            <MudItem xs="12">
                                <MudText Typo="Typo.body1" Color="Color.Success">@StatusMessage</MudText>
                            </MudItem>
                        }
                        <MudItem xs="12">
                            <AeroTextField T="string" @bind-Value="@userProfile.EmailAddress" FullWidth="true" HelperText="Can be used for notifications" Label="Email address"></AeroTextField>
                            @* <MudTextField T="string" HelperText="Email" Label="Email address"></MudTextField> *@
                        </MudItem>
                        <MudItem xs="12">
                            <AeroToggle @bind-Value="@userProfile.Settings.EnableBetaFeatures" Label="Join beta features"></AeroToggle>
                        </MudItem>
                        <MudItem xs="12">
                            <AeroToggle @bind-Value="@userProfile.Settings.UpdateActivityDescription" Label="Update activity descriptions"></AeroToggle>
                        </MudItem>
                        <MudItem xs="12">
                            <AeroToggle @bind-Value="@userProfile.Settings.PrivateProfile" Label="Hide profile from stats"></AeroToggle>
                            <AeroDivider></AeroDivider>
                        </MudItem>
                        <MudItem xs="12">
                            <AeroButton StartIcon="@Icons.Material.Filled.Save" OnClick="async () => await SaveSettingsAsync()">Save</AeroButton>
                        </MudItem>
                    }
                    else
                    {
                        <AeroLoader WaitingMessage="Loading settings..."/>
                    }
                    <MudItem xs="12">
                        <AeroSubtitle>Danger zone</AeroSubtitle>
                        <MudCheckBox T="bool" @bind-Value="@confirmed">By deleting my account, I understand all data will be removed from the server.</MudCheckBox>
                        @if (confirmed)
                        {
                            <AeroButton Mode="AeroButton.ButtonMode.Warning" OnClick="@(()=>confirmationDialogOpen=!confirmationDialogOpen)" StartIcon="@Icons.Material.Filled.DeleteForever">Delete data</AeroButton>
                        }
                    </MudItem>
                </MudGrid>
            }
        </MudItem>
        <MudItem xs="6" md="4">
            @if (!string.IsNullOrEmpty(_stravaNotAuthorizedMessage))
            {
                <MudText Typo="Typo.body1" Color="Color.Warning">@_stravaNotAuthorizedMessage</MudText>
            }
            else
            {
                @if (_stravaProfile != null)
                {
                    <MudGrid>
                        <MudItem xs="12">
                            <AeroSubtitle>Strava permission review</AeroSubtitle>
                        </MudItem>
                        <MudItem xs="12">
                            <MudList T="string" Dense="true">
                                <MudListItem Icon='@(_stravaProfile.AuthorizationTokenValid ? Icons.Material.Rounded.Check : Icons.Material.Rounded.Error)' IconColor='@(_stravaProfile.AuthorizationTokenValid ? Color.Success : Color.Error)'>
                                    <MudText Typo="Typo.body2">Strava token validity</MudText>
                                    <MudText Typo="Typo.body1">We @(_stravaProfile.AuthorizationTokenValid ? "do" : "don't") have a valid token</MudText>
                                </MudListItem>
                                <MudListItem Icon='@(_stravaProfile.ActivitiesCanBeRead ? Icons.Material.Rounded.Check : Icons.Material.Rounded.Error)' IconColor='@(_stravaProfile.ActivitiesCanBeRead ? Color.Success : Color.Error)'>
                                    <MudText Typo="Typo.body2">Activity access</MudText>
                                    <MudText Typo="Typo.body1">We @(_stravaProfile.ActivitiesCanBeRead ? "can" : "can't") read your activities</MudText>
                                </MudListItem>
                                @if (_stravaProfile.UpdateDescriptionFlag)
                                {
                                    <MudListItem Icon='@(_stravaProfile.ActivityDescriptionCanBeUpdated ? Icons.Material.Rounded.Check : Icons.Material.Rounded.Error)' IconColor='@(_stravaProfile.ActivityDescriptionCanBeUpdated ? Color.Success : Color.Error)'>
                                        <MudText Typo="Typo.body2">Activity Description</MudText>
                                        <MudText Typo="Typo.body1">We @(_stravaProfile.ActivityDescriptionCanBeUpdated ? "can" : "can't") update your activity descriptions</MudText>
                                    </MudListItem>
                                }
                                else
                                {
                                    <MudListItem Icon='@Icons.Material.Rounded.Check' IconColor='@Color.Success'>
                                        <MudText Typo="Typo.body2">Activity Description</MudText>
                                        <MudText Typo="Typo.body1">We @(_stravaProfile.ActivityDescriptionCanBeUpdated ? "do" : "don't") update your activity descriptions, but you disabled that setting.</MudText>
                                    </MudListItem>
                                }
                                @if (UserProfile.IsAdmin)
                                {
                                    <MudListItem>
                                        <MudText Typo="Typo.body2">Strava permissions</MudText>
                                        <MudText Typo="Typo.body1">"@(_stravaProfile.StravaPermissions ?? _stravaProfile.TokenScope)"</MudText>
                                    </MudListItem>
                                    <MudListItem>
                                        <MudText Typo="Typo.body2">Token last refreshed</MudText>
                                        <MudText Typo="Typo.body1">@(_stravaProfile.TokenLastRefreshed.PrintHistoricalTime())</MudText>
                                    </MudListItem>
                                    <MudListItem>
                                        <MudText Typo="Typo.body2">Token expiration</MudText>
                                        <MudText Typo="Typo.body1">@(_stravaProfile.TokenExpiration.PrintHistoricalTime())</MudText>
                                    </MudListItem>
                                }
                            </MudList>
                        </MudItem>
                        <MudItem xs="12">
                            <MudText Typo="Typo.body2">If you want to update and re-authorize Strava, using the right permissions, click the button below. You will be redirected to a new tab that you can easily close afterwards.</MudText>
                        </MudItem>
                        <MudItem xs="12">
                            <AeroButton StartIcon="@Icons.Material.Filled.Link" Color="Color.Secondary" Target="_blank" Href="http://www.strava.com/oauth/authorize?client_id=4987&response_type=code&redirect_uri=https://cotacol-hunting-workers.azurewebsites.net/api/StravaTokenHttpTrigger&approval_prompt=force&state=cotacolll&scope=read,read_all,activity:read_all,activity:read,activity:write,profile:write">Re-Authorize Strava</AeroButton>
                        </MudItem>
                    </MudGrid>
                }
                else
                {
                    <AeroLoader WaitingMessage="Loading strava permissions..."/>
                }
            }
        </MudItem>
        <MudItem xs="6" md="4">
            <MudGrid>
                <MudItem xs="12">
                    <AeroSubtitle>Sync Strava</AeroSubtitle>
                </MudItem>
                <MudItem xs="12">
                    <AeroFlexContainer>
                        <AeroToggle @bind-Value="@fullSync" Label="Sync ALL"></AeroToggle>
                        <MudIconButton Icon="@Icons.Material.Filled.Refresh" OnClick="@(async () => await PerformUserSyncAsync())"></MudIconButton>
                    </AeroFlexContainer>
                </MudItem>
                <MudItem xs="12">
                    <AeroLabel AllowCopy="true" Name="User Id" Value="@UserProfile.UserId"></AeroLabel>
                </MudItem>
            </MudGrid>
        </MudItem>

    }

</MudGrid>

<MudDialog @bind-IsVisible="@confirmationDialogOpen">
    <TitleContent>
        <MudText Typo="Typo.subtitle1">Deleting the user?</MudText>
    </TitleContent>
    <DialogContent>
        <MudText Typo="Typo.body1" Color="Color.Warning">This action is irriversable, Sure you want to remove the user?</MudText>
    </DialogContent>
    <DialogActions>
        <AeroButton OnClick="@(async () => await CotacolUserClient.RemoveUserAsync(UserId))">Delete user</AeroButton>
        <AeroButton Mode="AeroButton.ButtonMode.Subtle" OnClick="@(e => { confirmationDialogOpen = false; })">Cancel</AeroButton>
    </DialogActions>
</MudDialog>
@code {

    [CascadingParameter]
    public MainLayout Layout { get; set; } = null!;

    [Parameter]
    public string UserId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "authRequired")]
    public bool StravaAuthRequired { get; set; } = false;

    private AsyncWorkflowResult fullSyncResponse;
    private bool confirmed = false;
    private bool confirmationDialogOpen = false;
    private string StatusMessage;
    internal string UserIdToShow => string.IsNullOrEmpty(UserId) ? UserProfile.UserId : UserId;
    private UserProfile userProfile;
    private string _notAuthorizedMessage;
    private string _stravaNotAuthorizedMessage;
    private StravaUserProfile _stravaProfile;
    private bool fullSync;

    protected override async Task OnInitializedAsync()
    {
        Layout.Title = "Settings";
        if (StravaAuthRequired) return;
        if (UserProfile.IsAuthenticated || !string.IsNullOrEmpty(UserId))
        {
            if (!string.IsNullOrEmpty(UserId) && !UserProfile.IsAdmin)
            {
                _notAuthorizedMessage = "You are not allowed to see other user's settings";
            }
            else
            {
                userProfile = await CotacolUserClient.GetProfileAsync(UserIdToShow);
                if (userProfile?.RequiresBackendSync ?? true)
                {
                    StravaAuthRequired = true;
                    return;
                }
                if (userProfile.Settings.PrivateProfile && !string.IsNullOrEmpty(UserId) && !UserProfile.IsAdmin)
                {
                    _notAuthorizedMessage = "The user profile is not public";
                    userProfile = null;
                }
            }
        }
        if (UserProfile.IsAuthenticated || !string.IsNullOrEmpty(UserId))
        {
            if (!string.IsNullOrEmpty(UserId) && !UserProfile.IsAdmin)
            {
                _stravaNotAuthorizedMessage = "You are not allowed to see other user's Strava permissions";
            }
            else
            {
                if (!string.IsNullOrEmpty(UserIdToShow))
                {
                    _stravaProfile = await CotacolUserClient.GetStravaUserConfigurationAsync(UserIdToShow);
                }
            }
        }
    }

    private async Task SaveSettingsAsync()
    {
        await CotacolUserClient.UpdateSettingsAsync(UserIdToShow, userProfile.Settings, userProfile.EmailAddress);
        StatusMessage = "Settings were successfully updated.";
    }

    private async Task DeleteAccountAsync()
    {
        await CotacolUserClient.RemoveUserAsync(UserId);
    }
    
    private string GetName()
    {
        if (string.IsNullOrEmpty(UserId))
        {
            return $"({UserProfile.FullName})";
        }
        return string.IsNullOrEmpty(userProfile?.FullName) ? "" : $"({userProfile?.FullName})";
    }

    private async Task PerformUserSyncAsync()
    {
        if (!string.IsNullOrEmpty(UserId))
        {
            fullSyncResponse = await CotacolUserClient.SynchronizeAsync(UserId, fullSync);
        }
    }

}