@page "/achievements"
@page "/achievements/{UserId}"
@using Cotacol.Website.Models.CotacolApi
@using Cotacol.Website.Models
@inject ICotacolUserClient CotacolUserClient
@inject IUserProfileManager UserProfile
<Title Value="Cotacol Achievements"/>

<MudGrid Spacing="0">
    @if (!string.IsNullOrEmpty(_notAuthorizedMessage))
    {
        <MudItem xs="12">
            <MudText Typo="Typo.h1" Color="Color.Tertiary">Achievements</MudText>
        </MudItem>
        <MudItem xs="12">
            <ErrorDisplay ErrorMessage="_notAuthorizedMessage"/>
        </MudItem>
    }
    else
    {
        <MudItem xs="12">
            <MudText Typo="Typo.h1" Color="Color.Tertiary">@GetUserName()</MudText>
        </MudItem>
        @if(UserProfile.IsAdmin){
            <MudItem xs="12">
                <UserAdminLinks UserId="@UserId"/>
            </MudItem>
        }
        @if (_achievements == null)
        {
            <MudItem xs="12">
                <LoadingPatienceComponent WaitingMessage="We're retrieving the results , please be patient..."/>
            </MudItem>
        }
        else
        {
            <MudItem xs="6">
                <MudText Typo="Typo.h2" Color="Color.Tertiary">Your year in a Pic</MudText>
                <MudLink Href='@($"img/year/{UserIdToShow}")' Target="_blank">
                    <MudImage Src='@($"img/year/{UserIdToShow}")' Width="350"></MudImage>
                </MudLink>
                <MudText Typo="Typo.body1">Share you achievements with your friends on social media!</MudText>
            </MudItem>
            <MudItem xs="6">
                <MudText Typo="Typo.h2" Color="Color.Tertiary">Score</MudText>
                <MudText Typo="Typo.body1">Total points: @_achievements.TotalScore.Number()</MudText>
                <MudText Typo="Typo.body1">Unique cols: @_achievements.UniqueCols.Number()</MudText>
                <AchievementChartComponent Achievements="@_achievements"/>
            </MudItem>

            @if (_achievements.LocalLegends?.Any() ?? false)
            {
                <MudItem xs="12">
                    <MudText Typo="Typo.h2" Color="Color.Tertiary">Local legend at the following climbs</MudText>
                    <MudText Typo="Typo.body1">You are local legend if you did a col more than 5 times and no other user did more than you</MudText>
                    @foreach (var legend in _achievements.LocalLegends.OrderByDescending(cr => cr.Value))
                    {
                        <MudIcon Icon="@Icons.Filled.Favorite"></MudIcon>
                        <MudLink Typo="Typo.body1" Href='@($"cotacol/{legend.Key}")'>@GetLegendString(legend.Key)</MudLink>
                    }
                </MudItem>
            }
            <MudItem xs="6">
                <MudText Typo="Typo.h2" Color="Color.Tertiary">Most popular climbs</MudText>
                @if (string.IsNullOrEmpty(UserId))
                {
                    <MudText Typo="Typo.body1">These climbs are the climbs you ride the most, the stars indicate you're local legend.</MudText>
                }
                else
                {
                    <MudText Typo="Typo.body1">These climbs are the climbs the user rode the most, the stars indicate the user is a local legend.</MudText>
                }
                <MudList Clickable="true">
                    @foreach (var climb in _achievements.ColResults.OrderByDescending(cr => cr.Achievements.Count()).Take(10))
                    {
                        @if (_achievements.LocalLegends.Any(leg => leg.Key.Equals(climb.CotacolId)))
                        {
                            <MudListItem Href='@($"cotacol/{climb.CotacolId}")' Icon="@Icons.Filled.Favorite">@climb.CotacolName (@climb.Achievements.Count() attempts)</MudListItem>
                        }
                        else
                        {
                            <MudListItem Href='@($"cotacol/{climb.CotacolId}")'>@climb.CotacolName (@climb.Achievements.Count() attempts)</MudListItem>
                        }
                    }
                </MudList>
            </MudItem>

            @if (_nearLegendClimbs.Any())
            {
                <MudItem xs="6">
                    <MudText Typo="Typo.h2" Color="Color.Tertiary">These cols require few attempts for you to become Local Legend</MudText>
                    <MudList Clickable="true">
                        @foreach (var climb in _nearLegendClimbs)
                        {
                            <MudListItem Href='@($"cotacol/{climb.Id}")'>@climb.Name (@climb.AttemptsNeededToLegend attempts needed for @climb.CurrentLegendLimit)</MudListItem>
                        }
                    </MudList>
                </MudItem>
            }
            @if (UserProfile.IsAdmin)
            {
                <MudItem xs="12">
                    <MudText Typo="Typo.h2" Color="Color.Tertiary">Completed badges</MudText>
                    <MudGrid>
                        @foreach (var badge in _userBadges.Where(ub => ub.Completed).OrderBy(ub => ub.AchievementDate))
                        {
                            <UserBadgeComponent BadgeStatus="badge"></UserBadgeComponent>
                        }
                    </MudGrid>
                    <MudButton Href="badges" EndIcon="@Icons.Filled.List">View all badges</MudButton>
                </MudItem>
            }
        }
    }
</MudGrid>

@code {

    [Parameter]
    public string UserId { get; set; }

    internal string UserIdToShow => string.IsNullOrEmpty(UserId) ? UserProfile.UserId : UserId;
    private UserAchievements _achievements;
    private IEnumerable<UserClimb> _climbs;
    private IEnumerable<UserClimb> _nearLegendClimbs;
    private UserProfile _userProfile;
    private string? _notAuthorizedMessage;
    private List<UserBadgeStatus> _userBadges;

    protected override async Task OnInitializedAsync()
    {
        if (UserProfile.IsAuthenticated || !string.IsNullOrEmpty(UserId))
        {
            _userProfile = await CotacolUserClient.GetProfileAsync(UserIdToShow);
            if (_userProfile.UserSettings.PrivateProfile && !string.IsNullOrEmpty(UserId) && !UserProfile.IsAdmin)
            {
                _notAuthorizedMessage = "The user profile is not public";
                return;
            }
            _achievements = await CotacolUserClient.GetAchievementsAsync(UserIdToShow, true);
            _climbs = await CotacolUserClient.GetClimbDataAsync(UserIdToShow);
            _userBadges = await CotacolUserClient.GetBadgesAsync(UserIdToShow);
            _nearLegendClimbs = _climbs.Where(c => c.AttemptsNeededToLegend == 1);
            if (!_nearLegendClimbs.Any())
            {
                _nearLegendClimbs = _climbs
                    .Where(c => c.AttemptsNeededToLegend is >0 and <= 3)
                    .OrderBy(c => c.AttemptsNeededToLegend)
                    .Take(10);
            }
        }
    }

    private string GetUserName()
    {
        if (string.IsNullOrEmpty(UserId))
        {
            return UserProfile.FullName;
        }
        return _userProfile?.FullName ?? "User's achievements";
    }


    private string GetLegendString(string colId)
    {
        var col = _achievements.ColResults.FirstOrDefault(cr => cr.CotacolId.Equals(colId));
        return $" {col.CotacolId} {col.CotacolName} - {col.Achievements.Count} attempts";
    }

}